import { RenderDefault, hasGlobalComponent, isPlainObject, } from "@vuepress/helper/client";
import { computed, defineComponent, h, resolveComponent } from "vue";
import { withBase } from "vuepress/client";
import BreadCrumb from "@theme-hope/components/BreadCrumb";
import MarkdownContent from "@theme-hope/components/MarkdownContent";
import PageNav from "@theme-hope/components/PageNav";
import PageTitle from "@theme-hope/components/PageTitle";
import { useData } from "@theme-hope/composables/index";
import PageMeta from "@theme-hope/modules/info/components/PageMeta";
import TOC from "@theme-hope/modules/info/components/TOC";
import { useDarkMode } from "@theme-hope/modules/outlook/composables/index";
import "../styles/normal-page.scss";
const DEFAULT_TOC_OPTIONS = {
    selector: [
        ...Array.from({ length: 6 }).map((_, i) => `#markdown-content > h${i + 1}`),
        "[vp-content] > h2",
    ].join(", "),
    levels: "deep",
    ignore: [".vp-badge", ".vp-icon"],
};
export default defineComponent({
    name: "NormalPage",
    slots: Object,
    setup(_props, { slots }) {
        const { frontmatter, themeLocale } = useData();
        const { isDarkMode } = useDarkMode();
        const tocOptions = computed(() => {
            const config = frontmatter.value.toc ?? themeLocale.value.toc;
            return isPlainObject(config)
                ? { ...DEFAULT_TOC_OPTIONS, ...config }
                : (config ?? true)
                    ? DEFAULT_TOC_OPTIONS
                    : null;
        });
        return () => h("main", { id: "main-content", class: "vp-page" }, h(hasGlobalComponent("LocalEncrypt")
            ? resolveComponent("LocalEncrypt")
            : RenderDefault, () => [
            slots.top?.(),
            frontmatter.value.cover
                ? h("div", { class: "page-cover" }, h("img", {
                    src: withBase(frontmatter.value.cover),
                    alt: "",
                    "no-view": "",
                }))
                : null,
            h(BreadCrumb),
            h(PageTitle),
            tocOptions.value
                ? h(TOC, { options: tocOptions.value }, {
                    before: slots.tocBefore,
                    after: slots.tocAfter,
                })
                : null,
            h(MarkdownContent, {}, {
                before: slots.contentBefore,
                after: slots.contentAfter,
            }),
            h(PageMeta),
            h(PageNav),
            hasGlobalComponent("CommentService")
                ? h(resolveComponent("CommentService"), {
                    darkmode: isDarkMode.value,
                })
                : null,
            slots.bottom?.(),
        ]));
    },
});
//# sourceMappingURL=NormalPage.js.map